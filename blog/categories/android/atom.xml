<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | vicvan]]></title>
  <link href="http://yoursite.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-07-21T00:34:52+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[vicvan]]></name>
    <email><![CDATA[fanhongweiqq@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Develop Tips(一)]]></title>
    <link href="http://yoursite.com/blog/2014/12/11/android-develop-tip/"/>
    <updated>2014-12-11T00:07:34+08:00</updated>
    <id>http://yoursite.com/blog/2014/12/11/android-develop-tip</id>
    <content type="html"><![CDATA[<h2>Android常用项目结构</h2>

<p>在Android的开发过程中一直在不断的调整自己对于项目结构的架构方式，经过了多次的调整之后，现在基本每个项目都会以如下方式来架构：</p>

<ul>
<li><strong><em>api</em></strong>
放置一些API口类</li>
<li><strong><em>app</em></strong>
放置一些与整个东西pp相关的类，如继承自Application的当前应用的Appliation类、继承自系统Resources写的当前应用的Resurces类、应用的版本管理VersionManager类等</li>
<li><strong><em>bean</em></strong>
主要用来放置java bean的类</li>
<li><strong><em>io</em></strong>
放置一些io操作的类，如网络请求、文件读写、数据库操作等等</li>
<li><strong><em>provider</em></strong>
放置provider相关的类</li>
<li><strong><em>receiver</em></strong><br/>
放置整应用里边需要的reiver类</li>
<li><strong><em>service</em></strong>
放置整个应用里边的sevice类</li>
<li><strong><em>ui</em></strong>

<ul>
<li><strong><em>activity</em></strong>
整个应用的actvity类</li>
<li><strong><em>adapter</em></strong>
整个应用的adapter类</li>
<li><strong><em>controller</em></strong>
整个用中用到的ew层进行操纵的roller类</li>
<li><strong><em>fragment</em></strong>
整个应中的fragemnt类</li>
<li><strong><em>util</em></strong>
对应用中ui进行操作的一些helper类</li>
<li><strong><em>view</em></strong>
整个应中可以分离出来的view</li>
<li><strong><em>widget</em></strong>
整个应用的自定义控件</li>
</ul>
</li>
<li><strong><em>util</em></strong>
各种各样的工具类</li>
</ul>


<p>我现在基本上每个项目都是这种架构方式了，另外，我习惯将自己平时的积累的一些工具类之类的类整理到一个Common的library module中，自己的每个项目都会把这个common module倒入进来，这样子方便了很多。</p>

<!--more-->


<h2>Gradle</h2>

<p>Gradle只是提供了一个构建项目的框架,然后通过各种各样的Plugin来构建我们自己的项目。Gradle本身的领域对象主要有Project和Task，Project为task的执行提供了上下文。Gradle默认会将当前目录下的build.gradle作为项目的构建文件。接下来以一个实际项目为例类详细介绍gradle构建Android项目。</p>

<pre><code class="java">apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.1'

    defaultConfig {
        applicationId "us.drilight.android"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    signingConfigs {
        YourApp {
            storeFile file("Your keystore path")
            storePassword "Your keystore password"
            keyAlias "Your keyAlias"
            keyPassword "Your keyPassword"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.YourApp
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    productFlavors {
        baidu_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu_market"]
        }
        meizu_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "meizu_market"]
        }
        mumayi_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "mumayi_market"]
        }
        xiaomi_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi_market"]
        }
        wandoujia_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia_market"]
        }
        play_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "play_market"]
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':common')
    compile 'io.realm:realm-android:0.71.0'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.mcxiaoke.volley:library:1.0.6'
}
</code></pre>

<p><code>apply plugin: 'com.android.application'</code> 显然这是一个构建Android项目Gradle Plugin，另外，如果希望当前module是以一个library project被编译的话应该使用 <code>apply plugin: 'com.android.library'</code> 这个plugin。</p>

<pre><code class="java">android{
}

这一块是plugin中的android project构建。
</code></pre>

<pre><code class="java">compileSdkVersion 21
buildToolsVersion '21.1.1'

这一块是用来指定CompileSdkVersion和BuildToolsVersion的。
</code></pre>

<pre><code class="java">defaultConfig {
        applicationId "us.drilight.android"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

这一块是用来对project进行一个初步的配置，包括applicationId,minSdkVersion,versionCode,versionName。
这个地方有个需要注意的就是在gradle构建的project中versionCode和versionName以这个地方的为准，
AndroidMainfest.xml中关于这一块的配置不再有效。
</code></pre>

<pre><code class="java">lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

这一块主要是对编译过程的配置，如果这个地方不做处理的话，在编译的时候就连warning之类的都会导致编译通不过，所以配
置这一块基本是必须的。
</code></pre>

<pre><code class="java">signingConfigs {
        YourApp {
            storeFile file("Your keystore path")
            storePassword "Your keystore password"
            keyAlias "Your keyAlias"
            keyPassword "Your keyPassword"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.YourApp
        }
    }

这一块是对签名的配置
</code></pre>

<pre><code class="java">sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

这一块主要是对sourceSet的配置这个配置可以将libs下的.so库编译进当前project。sourceSets这一块Android
Studio会默认配置，当然也可以自己写比如：
(
java.srcDirs = ['src']
resources.srcDirs = ['src']
idl.srcDirs = ['src']
renderscript.srcDirs = ['src']
res.srcDirs = ['res']
assets.srcDirs = ['assets'])
这个视个人项目文件结构来具体配置。
</code></pre>

<pre><code class="java">productFlavors {
        baidu_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu_market"]
        }
        meizu_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "meizu_market"]
        }
        mumayi_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "mumayi_market"]
        }
        xiaomi_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi_market"]
        }
        wandoujia_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia_market"]
        }
        play_market {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "play_market"]
        }
    }

这一块是对多渠道包的配置，具体每一个渠道包的包名等等之类的信息都可以在这个地方配置，示例中是每一个
productFlavor中加入了友盟的多渠道信息统计。
</code></pre>

<pre><code class="java"> dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':common')
    compile 'io.realm:realm-android:0.71.0'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.mcxiaoke.volley:library:1.0.6'
}

这一块是对第三方依赖的配置。compile fileTree(dir: 'libs', include: ['*.jar']) 这个是将当前module项目
目录下的所有jar包以lib的形式编译到当前project中来。 compile project(':common') 这个的话是将第三方的
library project编译进当前project，这个地方要注意的是得先在settings.build中声明这个library,类似这样的
include ':app', ':Common' 。 compile 'com.google.code.gson:gson:2.3' 这个是通过从远程maven仓库的
形式来编译第三方library到当前project，我个人现在目前更倾向于这种形式导入第三方library。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android-FeedBack]]></title>
    <link href="http://yoursite.com/blog/2014/04/16/android-feedback/"/>
    <updated>2014-04-16T21:24:00+08:00</updated>
    <id>http://yoursite.com/blog/2014/04/16/android-feedback</id>
    <content type="html"><![CDATA[<h1>选择</h1>

<p>之前开发OverHust的时候，需要用到用户反馈这一功能，于是就在考虑怎么实现<strong>用户反馈</strong>这一功能。</p>

<p>目前，常规方法如下：</p>

<blockquote><ul>
<li><p>利用第三方服务，例如：<a href="http://www.umeng.com/">友盟</a></p></li>
<li><p>调用用户已登录的邮箱帐号发送邮件</p></li>
</ul>
</blockquote>

<h4>利用第三方服务</h4>

<p><code>优点</code>：使用第三方服务，只需要调用接口，简单粗暴。</p>

<p><code>缺点</code>：导入Library工程，自定义度不高。如果仅仅会用到第三方的用户反馈这一服务的话，更没必要导入别人的Library工程。</p>

<h4>调用用户已登录的邮箱帐号发送邮件</h4>

<p><code>优点</code>：直接调用系统的发送邮件服务，更加简单粗暴。</p>

<p><code>缺点</code>：如果用户没有在系统中登录邮箱帐号，那就悲剧了。</p>

<!--more-->


<p><em>详细了解上述两种方法各自的优劣之后,发现他们都不能很好的满足需求，因此，另谋出路。于是就在stackoverflow上发现可以用<code>JavaMail API</code>来实现。首先，不用导入一些其他Library工程，其次虽然也是用邮件服务，但是发信邮件帐号是在应用内指定的，与用户无关。当然，也是由于我自己想体验一下<code>JavaMail API</code>，之后开发应用还是更多的会用第三方服务，因为第三方服务有很多我用的着的功能。</em></p>

<h1>实现</h1>

<p>具体实现是参照stackoverflow上的 <a href="http://stackoverflow.com/questions/2020088/sending-email-in-android-using-javamail-api-without-using-the-default-built-in-a">Sending Email in Android using JavaMail API without using the default/built-in app</a></p>

<p>首先，在工程中导入这三个jar, <a href="http://javamail-android.googlecode.com/files/mail.jar">mail.jar</a> , <a href="http://javamail-android.googlecode.com/files/activation.jar">activation.jar</a> , <a href="http://javamail-android.googlecode.com/files/additionnal.jar">additionnal.jar</a>.</p>

<p>之后，写几个工具类就ok了（附上我项目中的这几个类）。</p>

<p><a href="https://github.com/fanhongwei/OverHust/blob/master/OverHust/src/main/java/com/unique/overhust/Feedback/JSSEProvider.java">JSSEProvider,java</a>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">unique</span><span class="o">.</span><span class="na">overhust</span><span class="o">.</span><span class="na">Feedback</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.security.AccessController</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.Provider</span><span class="o">;</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Created</span> <span class="n">by</span> <span class="n">fhw</span> <span class="n">on</span> <span class="mi">12</span><span class="o">/</span><span class="mi">27</span><span class="o">/</span><span class="mi">13</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">JSSEProvider</span> <span class="kd">extends</span> <span class="n">Provider</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="nf">JSSEProvider</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="s">&quot;HarmonyJSSE&quot;</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">,</span> <span class="s">&quot;Harmony JSSE Provider&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">PrivilegedAction</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Void</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">put</span><span class="o">(</span><span class="s">&quot;SSLContext.TLS&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s">&quot;org.apache.harmony.xnet.provider.jsse.SSLContextImpl&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">put</span><span class="o">(</span><span class="s">&quot;Alg.Alias.SSLContext.TLSv1&quot;</span><span class="o">,</span> <span class="s">&quot;TLS&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">put</span><span class="o">(</span><span class="s">&quot;KeyManagerFactory.X509&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s">&quot;org.apache.harmony.xnet.provider.jsse.KeyManagerFactoryImpl&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">put</span><span class="o">(</span><span class="s">&quot;TrustManagerFactory.X509&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s">&quot;org.apache.harmony.xnet.provider.jsse.TrustManagerFactoryImpl&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a href="https://github.com/fanhongwei/OverHust/blob/master/OverHust/src/main/java/com/unique/overhust/Feedback/GmailSender.java">GmailSender.java</a>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">unique</span><span class="o">.</span><span class="na">overhust</span><span class="o">.</span><span class="na">Feedback</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">javax.activation.DataHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.activation.DataSource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Authenticator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Message</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.PasswordAuthentication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Session</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Transport</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.internet.InternetAddress</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.internet.MimeMessage</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.io.ByteArrayInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.OutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.Security</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Created</span> <span class="n">by</span> <span class="n">fhw</span> <span class="n">on</span> <span class="mi">12</span><span class="o">/</span><span class="mi">27</span><span class="o">/</span><span class="mi">13</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GmailSender</span> <span class="kd">extends</span> <span class="n">Authenticator</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">mailhost</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">smtp</span><span class="o">.</span><span class="na">gmail</span><span class="o">.</span><span class="na">com</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Session</span> <span class="n">session</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Security</span><span class="o">.</span><span class="na">addProvider</span><span class="o">(</span><span class="k">new</span> <span class="nf">JSSEProvider</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">GmailSender</span><span class="o">(</span><span class="n">String</span> <span class="n">user</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">user</span> <span class="o">=</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Properties</span><span class="o">();</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;mail.transport.protocol&quot;</span><span class="o">,</span> <span class="s">&quot;smtp&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;mail.host&quot;</span><span class="o">,</span> <span class="n">mailhost</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;mail.smtp.auth&quot;</span><span class="o">,</span> <span class="s">&quot;true&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;mail.smtp.port&quot;</span><span class="o">,</span> <span class="s">&quot;465&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;mail.smtp.socketFactory.port&quot;</span><span class="o">,</span> <span class="s">&quot;465&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;mail.smtp.socketFactory.class&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;javax.net.ssl.SSLSocketFactory&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;mail.smtp.socketFactory.fallback&quot;</span><span class="o">,</span> <span class="s">&quot;false&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;mail.smtp.quitwait&quot;</span><span class="o">,</span> <span class="s">&quot;false&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span> <span class="o">=</span> <span class="n">Session</span><span class="o">.</span><span class="na">getDefaultInstance</span><span class="o">(</span><span class="n">props</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">protected</span> <span class="n">PasswordAuthentication</span> <span class="nf">getPasswordAuthentication</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">PasswordAuthentication</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">sendMail</span><span class="o">(</span><span class="n">String</span> <span class="n">subject</span><span class="o">,</span> <span class="n">String</span> <span class="n">body</span><span class="o">,</span> <span class="n">String</span> <span class="n">sender</span><span class="o">,</span> <span class="n">String</span> <span class="n">recipients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MimeMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MimeMessage</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
</span><span class='line'>        <span class="n">DataHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DataHandler</span><span class="o">(</span><span class="k">new</span> <span class="nf">ByteArrayDataSource</span><span class="o">(</span><span class="n">body</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="s">&quot;text/plain&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">message</span><span class="o">.</span><span class="na">setSender</span><span class="o">(</span><span class="k">new</span> <span class="nf">InternetAddress</span><span class="o">(</span><span class="n">sender</span><span class="o">));</span>
</span><span class='line'>        <span class="n">message</span><span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class='line'>        <span class="n">message</span><span class="o">.</span><span class="na">setDataHandler</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">recipients</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setRecipients</span><span class="o">(</span><span class="n">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="n">InternetAddress</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">recipients</span><span class="o">));</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setRecipient</span><span class="o">(</span><span class="n">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="k">new</span> <span class="nf">InternetAddress</span><span class="o">(</span><span class="n">recipients</span><span class="o">));</span>
</span><span class='line'>        <span class="n">Transport</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;gmailsender&quot;</span><span class="o">,</span><span class="s">&quot;ok&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;ecption&quot;</span><span class="o">,</span><span class="s">&quot;&quot;</span><span class="o">+</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ByteArrayDataSource</span> <span class="kd">implements</span> <span class="n">DataSource</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ByteArrayDataSource</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">,</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ByteArrayDataSource</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setType</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getContentType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;application/octet-stream&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">InputStream</span> <span class="nf">getInputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;ByteArrayDataSource&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">OutputStream</span> <span class="nf">getOutputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;Not Supported&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
最后，自己封装一个发送邮件的工具类。</p>

<p><a href="https://github.com/fanhongwei/OverHust/blob/master/OverHust/src/main/java/com/unique/overhust/Feedback/SendFeedback.java">SendFeedback.java</a></p>

<pre><code class="java">package com.unique.overhust.Feedback;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Build;
import android.telephony.TelephonyManager;
import android.util.Log;

import com.unique.overhust.CommonUtils.ShareContext;

/**
 * Created by fhw on 12/27/13.
 */
public class SendFeedback {
    private String feedbackBody;
    private String feedbackContact;
    private String handsetinfo;
    private int mType;

    public SendFeedback(String fdBody, String fdContact, int type) {
        this.feedbackBody = fdBody;
        this.feedbackContact = fdContact;
        this.mType = type;
        getHandsetinfo();
        new SendEmailTask(feedbackBody, feedbackContact, mType).execute();
    }

    public String getHandsetinfo() {
        TelephonyManager tm = (TelephonyManager) ShareContext.getInstance().getSystemService(Context.TELEPHONY_SERVICE);
        handsetinfo = "手机型号:" + Build.MODEL +
                ",SDK版本:" + Build.VERSION.SDK +
                ",系统版本:" + Build.VERSION.RELEASE +
                ",手机厂商:" + Build.MANUFACTURER;
        try {
            handsetinfo = handsetinfo + ",设备ID:" + tm.getDeviceId();
        } catch (Exception e) {
            Log.e("exception",""+e);
        }
        return handsetinfo;
    }

    class SendEmailTask extends AsyncTask&lt;Void, Void, Void&gt; {
        private final String subject = "用户反馈";
        private final String installSubject = "安装信息";
        private final String recipients = "overhustdsnc@gmail.com";
        private String mFeedbackBody;
        private String mFeedbackContact;
        private int Type;

        public SendEmailTask(String feedbackBody, String feedbackContact, int type) {
            this.mFeedbackBody = feedbackBody;
            this.mFeedbackContact = feedbackContact;
            this.Type = type;
        }

        @Override
        protected Void doInBackground(Void... params) {
            try {
                if (Type == 1) {
                    GmailSender sender = new GmailSender("YourGmailAccount", "password");
                    sender.sendMail(subject, "反馈内容:\n" + mFeedbackBody + "\n\n" + "联系方式:\n" + mFeedbackContact + "\n\n手机信息:\n" + handsetinfo, recipients, recipients);
                }
                if (Type == 2) {
                    GmailSender sender = new GmailSender("YourGmailAccount", "password");
                    sender.sendMail(installSubject, mFeedbackBody+mFeedbackContact+"手机信息:\n" + handsetinfo, recipients, recipients);
                }
            } catch (Exception e) {
                Log.e("SendMail", e.getMessage(), e);
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void result) {

        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MentalModel开发心得]]></title>
    <link href="http://yoursite.com/blog/2013/10/28/mental-model/"/>
    <updated>2013-10-28T08:39:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/10/28/mental-model</id>
    <content type="html"><![CDATA[<p>学校工业设计系一个实验室的老师在研究Android的交互设计，研究到人的心智模型这一块时，需要做一个实验，然后呢，就要用到一个Android的App，最后我帮他做了这个App，这期间有很多的体会和经验，写下来留给自己看。</p>

<p>这个应用大概是这样子的：</p>

<p>   <img src="http://yoursite.com/images/实验2.jpg" width="250" height="400"/> <img src="http://yoursite.com/images/testtwo.png" width="250" height="400" /></p>

<!--more-->


<p>   <img src="http://yoursite.com/images/testthree.png" width="250" height="400" /> <img src="http://yoursite.com/images/image.png" width="250" height="400" /></p>

<p>由于是实验型的App，这里边有将近45个页面，刚接触到这个应用时由于跟那老师的交流出了点问题，所以对应用的理解有偏差，没意识到会有这么多的界面，于是乎我就把没一个页面当作一个activity，开始一个新的页面activity是结束掉上一个页面的activity，当工程进行到后边时，深刻体会到了这种思路的缺陷。这应该也是第一次做到会有如此多的布局的App，深刻体会到了命名规范的好处。比如说，总共有四个实验，而每个实验有12中模式，那么对布局文件的命名很值得考量一番，要不会很乱的。</p>

<p>这个App实验三和实验四是图形模式或者flash模式，并且每种模式大概会有20张左右的图片，如果不用listview去分批加载的话，就会出现内存溢出的问题，由于我刚开始是在genymotion上的调试的一直没遇到这问题，也没去考虑，当准备开始测试的时候，在真机上调试之后很容易就出现了这个问题，一下子加载20张图片，这。。。最终，是用listview解决的这个问题。</p>

<p>既然是实验App，那么就肯定需要记录测试者的实验数据，这个实验记录的是测试者找到目标物的时间,7顺理成章的就写了一个专门记载时间的类，项目具体东西放github了。<a href="https://github.com/fanhongwei/MentalModel">MentalModel</a></p>

<p>最后，在做这个App的过程中还学到的一个东西，就是真正结束掉一个App，具体是思路是就是利用堆栈的原理，在intent实现activity跳转的时候加<code>intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</code>然后就可以轻松结束应用了，关于结束应用的方法网上还有很多，我就不说了。</p>
]]></content>
  </entry>
  
</feed>
