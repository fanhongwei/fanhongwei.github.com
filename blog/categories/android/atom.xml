<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | vicvan]]></title>
  <link href="http://fanhongwei.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://fanhongwei.github.io/"/>
  <updated>2015-12-17T21:34:42+08:00</updated>
  <id>http://fanhongwei.github.io/</id>
  <author>
    <name><![CDATA[vicvan]]></name>
    <email><![CDATA[fanhongweiqq@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android M DeepLinks AppLinks 详解]]></title>
    <link href="http://fanhongwei.github.io/blog/2015/12/17/app-links-deep-links/"/>
    <updated>2015-12-17T16:23:19+08:00</updated>
    <id>http://fanhongwei.github.io/blog/2015/12/17/app-links-deep-links</id>
    <content type="html"><![CDATA[<blockquote>
<p>在Android M中Google做了很多优化性能、提升用户体验的事情，比如说：App权限、Google Now on Tap、Doze省电系统、AppLinks、DeepLinks等。最近工作接触到了AppLinks、DeepLinks这两个提升用户体验的优化，于是将自己对这两个优化的分析理解记录了下来。</p>
</blockquote>

<p><strong>DeepLinks、AppLinks是两个比较容易混淆的概念，但是在Android M中是两个完全不同的东西。</strong></p>

<h1>DeepLinks</h1>

<p>从概念上不容易理解DeepLinks，所以举个例子来说。比如我们的手机安装了微信，当其他App发起一个Action为android.intent.action.SEND的intent的时候，Android系统会弹出Choose Picker供用户选择被调起应用，如果微信适配了Android M的DeepLinks，给DeepLinks中添加了常用8位微信联系人，那么在系统弹出的Choose Picker中会直接显示这8位联系人，供用户选择，直接将消息发送至选择用户。</p>

<!--more-->

<h4>DeepLinks适配</h4>

<ul>
<li>继承自Android SDK的ChooserTargetService实现自己的Service</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class SampleChooserTargetService extends ChooserTargetService {

    @Override
    public List&lt;ChooserTarget&gt; onGetChooserTargets(ComponentName targetActivityName, IntentFilter matchedFilter) {
        final List&lt;ChooserTarget&gt; targets = new ArrayList&lt;&gt;();
        for (int i = 0; i &lt; length; i++) {
            // The title of the target
            final String title = ...
            // The icon to represent the target
            final Icon icon = ...
            // Ranking score for this target between 0.0f and 1.0f
            final float score = ...
            // PendingIntent to fill in and send if the user chooses this target
            final PendingIntent action = ...
            targets.add(new ChooserTarget(title, icon, score, action));
        }
        return targets;
    }

}
</code></pre></div>
<ul>
<li>在AndroidManifest中声明Service</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;service android:name=&quot;.SampleChooserTargetService&quot;
             android:label=&quot;@string/service_name&quot;
             android:permission=&quot;android.permission.BIND_CHOOSER_TARGET_SERVICE&quot;&gt;
         &lt;intent-filter&gt;
             &lt;action android:name=&quot;android.service.chooser.ChooserTargetService&quot; /&gt;
         &lt;/intent-filter&gt;
&lt;/service&gt;
</code></pre></div>
<ul>
<li>在需要响应的Activity中添加meta-data</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text"> &lt;activity android:name=&quot;.SampleActivity&quot;
             android:label=&quot;@string/sample_activity_label&quot;&gt;
         &lt;intent-filter&gt;
             &lt;action android:name=&quot;android.intent.action.SEND&quot; /&gt;
         &lt;/intent-filter&gt;
         &lt;meta-data android:name=&quot;android.service.chooser.chooser_target_service&quot;
                 android:value=&quot;.SampleChooserTargetService&quot; /&gt;
     &lt;/activity&gt;
</code></pre></div>
<h4>DeepLinks分析</h4>

<p>DeepLinks主要涉及到Android Framework中的ResolverActivity和ChooserActivity，在API 23之前ChooserActivity几乎没有东西，但是在v23中增加了不少代码，DeepLinks逻辑一定在这一部分增加的代码中，我们结合代码详细分析。</p>

<p>从ResolverActivity的onCreate开始分析</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">protected void onCreate(Bundle savedInstanceState, Intent intent,
            CharSequence title, int defaultTitleRes, Intent[] initialIntents,
            List&lt;ResolveInfo&gt; rList, boolean alwaysUseOption) {
        setTheme(R.style.Theme_DeviceDefault_Resolver);
        super.onCreate(savedInstanceState);

        // Determine whether we should show that intent is forwarded
        // from managed profile to owner or other way around.
        setProfileSwitchMessageId(intent.getContentUserHint());

        ...

        // Add our initial intent as the first item, regardless of what else has already been added.
        mIntents.add(0, new Intent(intent));

        final String referrerPackage = getReferrerPackageName();

        mResolverComparator = new ResolverComparator(this, getTargetIntent(), referrerPackage);

        if (configureContentView(mIntents, initialIntents, rList, alwaysUseOption)) {
            return;
        }

        // Prevent the Resolver window from becoming the top fullscreen window and thus from taking
        // control of the system bars.
        getWindow().clearFlags(FLAG_LAYOUT_IN_SCREEN|FLAG_LAYOUT_INSET_DECOR);
        ...

}
</code></pre></div>
<p>在20行的位置调用了confiureContentView方法</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/**
     * Returns true if the activity is finishing and creation should halt
     */
    boolean configureContentView(List&lt;Intent&gt; payloadIntents, Intent[] initialIntents,
            List&lt;ResolveInfo&gt; rList, boolean alwaysUseOption) {
        // The last argument of createAdapter is whether to do special handling
        // of the last used choice to highlight it in the list.  We need to always
        // turn this off when running under voice interaction, since it results in
        // a more complicated UI that the current voice interaction flow is not able
        // to handle.
        mAdapter = createAdapter(this, payloadIntents, initialIntents, rList,
                mLaunchedFromUid, alwaysUseOption &amp;&amp; !isVoiceInteraction());

        final int layoutId;
        if (mAdapter.hasFilteredItem()) {
            layoutId = R.layout.resolver_list_with_default;
            alwaysUseOption = false;
        } else {
            layoutId = getLayoutResource();
        }
        mAlwaysUseOption = alwaysUseOption;
        ...
    }
</code></pre></div>
<p>在方法的开头调用了createAdapter这个地方应该是构造Choose Picker用到的Adapter，ChooserActivity继承自ResolverActivity，会发现ChooserActivity重写了createAdapter</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@Override
    ResolveListAdapter createAdapter(Context context, List&lt;Intent&gt; payloadIntents,
            Intent[] initialIntents, List&lt;ResolveInfo&gt; rList, int launchedFromUid,
            boolean filterLastUsed) {
        final ChooserListAdapter adapter = new ChooserListAdapter(context, payloadIntents,
                initialIntents, rList, launchedFromUid, filterLastUsed);
        if (DEBUG) Log.d(TAG, &quot;Adapter created; querying services&quot;);
        queryTargetServices(adapter);
        return adapter;
    }
</code></pre></div>
<p>在这个地方应该注意到queryTargetServices</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">void queryTargetServices(ChooserListAdapter adapter) {
        final PackageManager pm = getPackageManager();
        int targetsToQuery = 0;
        for (int i = 0, N = adapter.getDisplayResolveInfoCount(); i &lt; N; i++) {
            final DisplayResolveInfo dri = adapter.getDisplayResolveInfo(i);
            final ActivityInfo ai = dri.getResolveInfo().activityInfo;
            final Bundle md = ai.metaData;
            final String serviceName = md != null ? convertServiceName(ai.packageName,
                    md.getString(ChooserTargetService.META_DATA_NAME)) : null;
            if (serviceName != null) {
                final ComponentName serviceComponent = new ComponentName(
                        ai.packageName, serviceName);
                final Intent serviceIntent = new Intent(ChooserTargetService.SERVICE_INTERFACE)
                        .setComponent(serviceComponent);

                if (DEBUG) {
                    Log.d(TAG, &quot;queryTargets found target with service &quot; + serviceComponent);
                }

                try {
                    final String perm = pm.getServiceInfo(serviceComponent, 0).permission;
                    if (!ChooserTargetService.BIND_PERMISSION.equals(perm)) {
                        Log.w(TAG, &quot;ChooserTargetService &quot; + serviceComponent + &quot; does not require&quot;
                                + &quot; permission &quot; + ChooserTargetService.BIND_PERMISSION
                                + &quot; - this service will not be queried for ChooserTargets.&quot;
                                + &quot; add android:permission=\&quot;&quot;
                                + ChooserTargetService.BIND_PERMISSION + &quot;\&quot;&quot;
                                + &quot; to the &lt;service&gt; tag for &quot; + serviceComponent
                                + &quot; in the manifest.&quot;);
                        continue;
                    }
                } catch (NameNotFoundException e) {
                    Log.e(TAG, &quot;Could not look up service &quot; + serviceComponent, e);
                    continue;
                }

                final ChooserTargetServiceConnection conn =
                        new ChooserTargetServiceConnection(this, dri);
                if (bindServiceAsUser(serviceIntent, conn, BIND_AUTO_CREATE | BIND_NOT_FOREGROUND,
                        UserHandle.CURRENT)) {
                    if (DEBUG) {
                        Log.d(TAG, &quot;Binding service connection for target &quot; + dri
                                + &quot; intent &quot; + serviceIntent);
                    }
                    mServiceConnections.add(conn);
                    targetsToQuery++;
                }
            }
            if (targetsToQuery &gt;= QUERY_TARGET_SERVICE_LIMIT) {
                if (DEBUG) Log.d(TAG, &quot;queryTargets hit query target limit &quot;
                        + QUERY_TARGET_SERVICE_LIMIT);
                break;
            }
        }

        if (!mServiceConnections.isEmpty()) {
            if (DEBUG) Log.d(TAG, &quot;queryTargets setting watchdog timer for &quot;
                    + WATCHDOG_TIMEOUT_MILLIS + &quot;ms&quot;);
            mChooserHandler.sendEmptyMessageDelayed(CHOOSER_TARGET_SERVICE_WATCHDOG_TIMEOUT,
                    WATCHDOG_TIMEOUT_MILLIS);
        } else {
            sendVoiceChoicesIfNeeded();
        }
    }
</code></pre></div>
<p>可以看到queryTargetServices主要遍历可调起Activity,并根据我们适配过程中添加的meta-data数据取到ChooserTargetService，并作一系列操作，最后将ChooserTargetServiceConnection添加到List mServiceConnections中。接下来分析ChooserTargetServiceConnection这个内部类</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">static class ChooserTargetServiceConnection implements ServiceConnection {
        private final DisplayResolveInfo mOriginalTarget;
        private ComponentName mConnectedComponent;
        private ChooserActivity mChooserActivity;
        private final Object mLock = new Object();

        private final IChooserTargetResult mChooserTargetResult = new IChooserTargetResult.Stub() {
            @Override
            public void sendResult(List&lt;ChooserTarget&gt; targets) throws RemoteException {
                synchronized (mLock) {
                    if (mChooserActivity == null) {
                        Log.e(TAG, &quot;destroyed ChooserTargetServiceConnection received result from &quot;
                                + mConnectedComponent + &quot;; ignoring...&quot;);
                        return;
                    }
                    mChooserActivity.filterServiceTargets(
                            mOriginalTarget.getResolveInfo().activityInfo.packageName, targets);
                    final Message msg = Message.obtain();
                    msg.what = CHOOSER_TARGET_SERVICE_RESULT;
                    msg.obj = new ServiceResultInfo(mOriginalTarget, targets,
                            ChooserTargetServiceConnection.this);
                    mChooserActivity.mChooserHandler.sendMessage(msg);
                }
            }
        };

        public ChooserTargetServiceConnection(ChooserActivity chooserActivity,
                DisplayResolveInfo dri) {
            mChooserActivity = chooserActivity;
            mOriginalTarget = dri;
        }

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            if (DEBUG) Log.d(TAG, &quot;onServiceConnected: &quot; + name);
            synchronized (mLock) {
                if (mChooserActivity == null) {
                    Log.e(TAG, &quot;destroyed ChooserTargetServiceConnection got onServiceConnected&quot;);
                    return;
                }

                final IChooserTargetService icts = IChooserTargetService.Stub.asInterface(service);
                try {
                    icts.getChooserTargets(mOriginalTarget.getResolvedComponentName(),
                            mOriginalTarget.getResolveInfo().filter, mChooserTargetResult);
                } catch (RemoteException e) {
                    Log.e(TAG, &quot;Querying ChooserTargetService &quot; + name + &quot; failed.&quot;, e);
                    mChooserActivity.unbindService(this);
                    destroy();
                    mChooserActivity.mServiceConnections.remove(this);
                }
            }
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            if (DEBUG) Log.d(TAG, &quot;onServiceDisconnected: &quot; + name);
            synchronized (mLock) {
                if (mChooserActivity == null) {
                    Log.e(TAG,
                            &quot;destroyed ChooserTargetServiceConnection got onServiceDisconnected&quot;);
                    return;
                }

                mChooserActivity.unbindService(this);
                destroy();
                mChooserActivity.mServiceConnections.remove(this);
                if (mChooserActivity.mServiceConnections.isEmpty()) {
                    mChooserActivity.mChooserHandler.removeMessages(
                            CHOOSER_TARGET_SERVICE_WATCHDOG_TIMEOUT);
                    mChooserActivity.sendVoiceChoicesIfNeeded();
                }
                mConnectedComponent = null;
            }
        }

        public void destroy() {
            synchronized (mLock) {
                mChooserActivity = null;
            }
        }

        @Override
        public String toString() {
            return &quot;ChooserTargetServiceConnection{service=&quot;
                    + mConnectedComponent + &quot;, activity=&quot;
                    + mOriginalTarget.getResolveInfo().activityInfo.toString() + &quot;}&quot;;
        }
    }
</code></pre></div>
<p>可以看到在44行的位置通过getChooserTargets拿到了我们适配过程中SampleChooserTargetService中返回的target list。在22行的位置可以看到mChooserHandler sendMessage，接下来继续看mChooserHandler</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">private final Handler mChooserHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case CHOOSER_TARGET_SERVICE_RESULT:
                    if (DEBUG) Log.d(TAG, &quot;CHOOSER_TARGET_SERVICE_RESULT&quot;);
                    if (isDestroyed()) break;
                    final ServiceResultInfo sri = (ServiceResultInfo) msg.obj;
                    if (!mServiceConnections.contains(sri.connection)) {
                        Log.w(TAG, &quot;ChooserTargetServiceConnection &quot; + sri.connection
                                + &quot; returned after being removed from active connections.&quot;
                                + &quot; Have you considered returning results faster?&quot;);
                        break;
                    }
                    if (sri.resultTargets != null) {
                        mChooserListAdapter.addServiceResults(sri.originalTarget,
                                sri.resultTargets);
                    }
                    unbindService(sri.connection);
                    sri.connection.destroy();
                    mServiceConnections.remove(sri.connection);
                    if (mServiceConnections.isEmpty()) {
                        mChooserHandler.removeMessages(CHOOSER_TARGET_SERVICE_WATCHDOG_TIMEOUT);
                        sendVoiceChoicesIfNeeded();
                    }
                    break;

                ...
            }
        }
    };
</code></pre></div>
<p>在16行位置可以看到mChooserListAdapter.addServiceResults方法将resultTargets传给了adapter,接下来看addServiceResults的代码</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public void addServiceResults(DisplayResolveInfo origTarget, List&lt;ChooserTarget&gt; targets) {
            if (DEBUG) Log.d(TAG, &quot;addServiceResults &quot; + origTarget + &quot;, &quot; + targets.size()
                    + &quot; targets&quot;);
            final float parentScore = getScore(origTarget);
            Collections.sort(targets, mBaseTargetComparator);
            float lastScore = 0;
            for (int i = 0, N = targets.size(); i &lt; N; i++) {
                final ChooserTarget target = targets.get(i);
                float targetScore = target.getScore();
                targetScore *= parentScore;
                targetScore *= mLateFee;
                if (i &gt; 0 &amp;&amp; targetScore &gt;= lastScore) {
                    // Apply a decay so that the top app can&#39;t crowd out everything else.
                    // This incents ChooserTargetServices to define what&#39;s truly better.
                    targetScore = lastScore * 0.95f;
                }
                insertServiceTarget(new ChooserTargetInfo(origTarget, target, targetScore));

                if (DEBUG) {
                    Log.d(TAG, &quot; =&gt; &quot; + target.toString() + &quot; score=&quot; + targetScore
                            + &quot; base=&quot; + target.getScore()
                            + &quot; lastScore=&quot; + lastScore
                            + &quot; parentScore=&quot; + parentScore
                            + &quot; lateFee=&quot; + mLateFee);
                }

                lastScore = targetScore;
            }

            mLateFee *= 0.95f;

            notifyDataSetChanged();
        }
</code></pre></div>
<p>可以看到这个方法通过循环遍历resultTargets，并将每一个target insert到mChooserAdapter中，从而实现了将用户App中的target添加到ChooserActivity中。</p>

<p>至此，已经熟悉了DeepLinks的适配以及DeepLinks的实现原理，接下来看AppLinks。</p>

<h1>AppLinks</h1>

<p>同样以微信为例来说。比如我们的手机安装了微信，并且微信适配了Android M的AppLinks，当我们点击微信AppLinks适配的链接时，Android M系统不再弹出可以打开网页的Apps的Choose Picker，而是直接跳转到微信指定页面。</p>

<h4>AppLinks适配</h4>

<ul>
<li>首先为intent-filter标签添加android:autoVerify=&quot;true&quot;的属性</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;activity ...&gt;

    &lt;intent-filter android:autoVerify=&quot;true&quot;&gt;
        &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;
        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;
        &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;
        &lt;data android:scheme=&quot;http&quot; android:host=&quot;www.example.com&quot; /&gt;
        &lt;data android:scheme=&quot;https&quot; android:host=&quot;www.example.com&quot; /&gt;
    &lt;/intent-filter&gt;

&lt;/activity&gt;
</code></pre></div>
<ul>
<li>创建JSON文件，JSON文件中需要包含app的ID以及APK的公钥证书。这个地方一个App可以对应多个website，一个website也可以对应多个App。具体详情可以前往 <a href="http://developer.android.com/intl/zh-cn/training/app-links/index.html#">Android Developer</a></li>
<li>创建完文件之后，需要上传它同时保证它可以使用这个URL访问http://example.com/.well-known/statements.json。</li>
</ul>

<h4>AppLinks分析</h4>

<p>主要分析Android M Framework PackageManagerService中添加的一段代码</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">private interface IntentFilterVerifier&lt;T extends IntentFilter&gt; {
        boolean addOneIntentFilterVerification(int verifierId, int userId, int verificationId,
                                               T filter, String packageName);
        void startVerifications(int userId);
        void receiveVerificationResponse(int verificationId);
    }

    private class IntentVerifierProxy implements IntentFilterVerifier&lt;ActivityIntentInfo&gt; {
        private Context mContext;
        private ComponentName mIntentFilterVerifierComponent;
        private ArrayList&lt;Integer&gt; mCurrentIntentFilterVerifications = new ArrayList&lt;Integer&gt;();

        public IntentVerifierProxy(Context context, ComponentName verifierComponent) {
            mContext = context;
            mIntentFilterVerifierComponent = verifierComponent;
        }

        private String getDefaultScheme() {
            return IntentFilter.SCHEME_HTTPS;
        }

        @Override
        public void startVerifications(int userId) {
            // Launch verifications requests
            int count = mCurrentIntentFilterVerifications.size();
            for (int n=0; n&lt;count; n++) {
                int verificationId = mCurrentIntentFilterVerifications.get(n);
                final IntentFilterVerificationState ivs =
                        mIntentFilterVerificationStates.get(verificationId);

                String packageName = ivs.getPackageName();

                ArrayList&lt;PackageParser.ActivityIntentInfo&gt; filters = ivs.getFilters();
                final int filterCount = filters.size();
                ArraySet&lt;String&gt; domainsSet = new ArraySet&lt;&gt;();
                for (int m=0; m&lt;filterCount; m++) {
                    PackageParser.ActivityIntentInfo filter = filters.get(m);
                    domainsSet.addAll(filter.getHostsList());
                }
                ArrayList&lt;String&gt; domainsList = new ArrayList&lt;&gt;(domainsSet);
                synchronized (mPackages) {
                    if (mSettings.createIntentFilterVerificationIfNeededLPw(
                            packageName, domainsList) != null) {
                        scheduleWriteSettingsLocked();
                    }
                }
                sendVerificationRequest(userId, verificationId, ivs);
            }
            mCurrentIntentFilterVerifications.clear();
        }

        private void sendVerificationRequest(int userId, int verificationId,
                IntentFilterVerificationState ivs) {

            Intent verificationIntent = new Intent(Intent.ACTION_INTENT_FILTER_NEEDS_VERIFICATION);
            verificationIntent.putExtra(
                    PackageManager.EXTRA_INTENT_FILTER_VERIFICATION_ID,
                    verificationId);
            verificationIntent.putExtra(
                    PackageManager.EXTRA_INTENT_FILTER_VERIFICATION_URI_SCHEME,
                    getDefaultScheme());
            verificationIntent.putExtra(
                    PackageManager.EXTRA_INTENT_FILTER_VERIFICATION_HOSTS,
                    ivs.getHostsString());
            verificationIntent.putExtra(
                    PackageManager.EXTRA_INTENT_FILTER_VERIFICATION_PACKAGE_NAME,
                    ivs.getPackageName());
            verificationIntent.setComponent(mIntentFilterVerifierComponent);
            verificationIntent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);

            UserHandle user = new UserHandle(userId);
            mContext.sendBroadcastAsUser(verificationIntent, user);
            if (DEBUG_DOMAIN_VERIFICATION) Slog.d(TAG,
                    &quot;Sending IntentFilter verification broadcast&quot;);
        }

        public void receiveVerificationResponse(int verificationId) {
            IntentFilterVerificationState ivs = mIntentFilterVerificationStates.get(verificationId);

            final boolean verified = ivs.isVerified();

            ArrayList&lt;PackageParser.ActivityIntentInfo&gt; filters = ivs.getFilters();
            final int count = filters.size();
            if (DEBUG_DOMAIN_VERIFICATION) {
                Slog.i(TAG, &quot;Received verification response &quot; + verificationId
                        + &quot; for &quot; + count + &quot; filters, verified=&quot; + verified);
            }
            for (int n=0; n&lt;count; n++) {
                PackageParser.ActivityIntentInfo filter = filters.get(n);
                filter.setVerified(verified);

                if (DEBUG_DOMAIN_VERIFICATION) Slog.d(TAG, &quot;IntentFilter &quot; + filter.toString()
                        + &quot; verified with result:&quot; + verified + &quot; and hosts:&quot;
                        + ivs.getHostsString());
            }

            mIntentFilterVerificationStates.remove(verificationId);

            final String packageName = ivs.getPackageName();
            IntentFilterVerificationInfo ivi = null;

            synchronized (mPackages) {
                ivi = mSettings.getIntentFilterVerificationLPr(packageName);
            }
            if (ivi == null) {
                Slog.w(TAG, &quot;IntentFilterVerificationInfo not found for verificationId:&quot;
                        + verificationId + &quot; packageName:&quot; + packageName);
                return;
            }
            if (DEBUG_DOMAIN_VERIFICATION) Slog.d(TAG,
                    &quot;Updating IntentFilterVerificationInfo for package &quot; + packageName
                            +&quot; verificationId:&quot; + verificationId);

            synchronized (mPackages) {
                if (verified) {
                    ivi.setStatus(INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS);
                } else {
                    ivi.setStatus(INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK);
                }
                scheduleWriteSettingsLocked();

                final int userId = ivs.getUserId();
                if (userId != UserHandle.USER_ALL) {
                    final int userStatus =
                            mSettings.getIntentFilterVerificationStatusLPr(packageName, userId);

                    int updatedStatus = INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED;
                    boolean needUpdate = false;

                    // We cannot override the STATUS_ALWAYS / STATUS_NEVER states if they have
                    // already been set by the User thru the Disambiguation dialog
                    switch (userStatus) {
                        case INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED:
                            if (verified) {
                                updatedStatus = INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS;
                            } else {
                                updatedStatus = INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK;
                            }
                            needUpdate = true;
                            break;

                        case INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK:
                            if (verified) {
                                updatedStatus = INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS;
                                needUpdate = true;
                            }
                            break;

                        default:
                            // Nothing to do
                    }

                    if (needUpdate) {
                        mSettings.updateIntentFilterVerificationStatusLPw(
                                packageName, updatedStatus, userId);
                        scheduleWritePackageRestrictionsLocked(userId);
                    }
                }
            }
        }

        @Override
        public boolean addOneIntentFilterVerification(int verifierUid, int userId, int verificationId,
                    ActivityIntentInfo filter, String packageName) {
            if (!hasValidDomains(filter)) {
                return false;
            }
            IntentFilterVerificationState ivs = mIntentFilterVerificationStates.get(verificationId);
            if (ivs == null) {
                ivs = createDomainVerificationState(verifierUid, userId, verificationId,
                        packageName);
            }
            if (DEBUG_DOMAIN_VERIFICATION) {
                Slog.d(TAG, &quot;Adding verification filter for &quot; + packageName + &quot; : &quot; + filter);
            }
            ivs.addFilter(filter);
            return true;
        }

        private IntentFilterVerificationState createDomainVerificationState(int verifierUid,
                int userId, int verificationId, String packageName) {
            IntentFilterVerificationState ivs = new IntentFilterVerificationState(
                    verifierUid, userId, packageName);
            ivs.setPendingState();
            synchronized (mPackages) {
                mIntentFilterVerificationStates.append(verificationId, ivs);
                mCurrentIntentFilterVerifications.add(verificationId);
            }
            return ivs;
        }
    }
</code></pre></div>
<p>这一部分主要有IntentFilterVerifier接口、实现了该接口的IntentVerifierProxy代理类。</p>

<ul>
<li>在PackageManager安装apk的过程中，会通过IntentVerifierProxy startVerifications（23行），在这个过程中会调用代理类的sendVerificationRequest（47行）。</li>
<li>sendVerificationRequest会发出一个带有android.intent.action.INTENT<em>FILTER</em>NEEDS_VERIFICATION的广播intent，intent中还携带有该package的信息（72行）。</li>
<li>Intent Filter Verifier的广播接收器获取这个广播，从package的<intent-filter>标签中编译出一个特有主机名的列表，verifier尝试从每个特有的主机名中获取statements.json，每一个被获取的JSON文件都会检查它的application ID和安装包的证书。当所有文件同时满足时发送成功信息到PackageManagerService的receiveVerificationResponse。</li>
<li>在receiveVerificationResponse中通过scheduleWriteSettingsLocked保存结果（120行）。</li>
</ul>

<p>至此，也已经熟悉了AppLinks的适配以及AppLinks的实现原理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Resource walkthrough]]></title>
    <link href="http://fanhongwei.github.io/blog/2015/08/18/android-resource-walkthrough/"/>
    <updated>2015-08-18T23:13:17+08:00</updated>
    <id>http://fanhongwei.github.io/blog/2015/08/18/android-resource-walkthrough</id>
    <content type="html"><![CDATA[<blockquote>
<p>关于Android Resource这一块<a href="http://blog.csdn.net/luoshengyang/article/details/8738877">老罗博客</a>有详细分析，并且罗老师的博客大家都懂的，质量很高。但是我还是决定把自己从
开发者的角度对这一块的理解记录下来，所以就有了这篇文章，本文章也来自于对罗老师博客的学习研究。</p>
</blockquote>

<p>文章主要从 <strong>代码编写</strong>、<strong>代码编译</strong>、<strong>代码运行</strong> 三个阶段来分析。</p>

<h2>代码编写阶段</h2>

<p>首先我们来看Android应用资源分类,Android应用程序资源可以分为两大类，分别是assets和res。</p>

<ul>
<li>assets

<ul>
<li>assets类资源放在工程根目录的assets子目录下，它里面保存的是一些原始的文件，可以以任何方式来进行组织。这些文件最终会被原装不动地打包在apk文件中。如果我们要在程序中访问这些文件，那么
就需要指定文件名来访问。</li>
</ul></li>
</ul>

<!-- More-->

<ul>
<li>res

<ul>
<li>animator 这类资源以XML文件保存在res/animator目录下，用来描述属性动画。</li>
<li>anim 这类资源以XML文件保存在res/anim目录下，用来描述补间动画。</li>
<li>color 这类资源以XML文件保存在res/color目录下，用来描述对象颜色状态。</li>
<li>drawable(mipmap) 这类资源以XML或者Bitmap文件保存在res/drawable目录下，用来描述可绘制对象。</li>
<li>layout 这类资源以XML文件保存在res/layout目录下，用来描述应用程序界面布局。</li>
<li>menu 这类资源以XML文件保存在res/menu目录下，用来描述应用程序菜单.</li>
<li>raw 这类资源以任意格式的文件保存在res/raw目录下，它们和assets类资源一样，都是原装不动地打包在apk文件中的，不过它们会被赋予资源ID，这样我们就可以在程序中通过ID来访问它们。</li>
<li>values 这类资源以XML文件保存在res/values目录下，用来描述一些简单值，例如，数组、颜色、尺寸、字符串和样式值等，一般来说，这六种不同的值分别保存在名称为arrays.xml、colors.xml、
dimens.xml、strings.xml和styles.xml文件中。</li>
<li>xml 这类资源以XML文件保存在res/xml目录下，一般就是用来描述应用程序的配置信息。</li>
</ul></li>
</ul>

<p>我们在一般开发App过程中resource这一块主要就是操作这些文件夹，需要额外说的地方就是Android resource对于多分辨率、多语言、多版本、多屏幕等的支持。在这一块有一种说法就是Android默认应用程序资源的组织
方式有18个维度，当然如果从系统层次搞明白Android资源加载的话我们是可以自定义一些维度进去的。</p>

<table><thead>
<tr>
<th style="text-align: left">配置</th>
<th style="text-align: right">限定修饰词</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: left">MCC and MNC</td>
<td style="text-align: right">mcc310等</td>
</tr>
<tr>
<td style="text-align: left">language and region</td>
<td style="text-align: right">en、fr、en-rFR、zh等</td>
</tr>
<tr>
<td style="text-align: left">layout direction</td>
<td style="text-align: right">ldrtl、ldltr等</td>
</tr>
<tr>
<td style="text-align: left">smallestWidth</td>
<td style="text-align: right">sw320dp、sw600dp等</td>
</tr>
<tr>
<td style="text-align: left">available width</td>
<td style="text-align: right">w720dp、w1024dp等</td>
</tr>
<tr>
<td style="text-align: left">available height</td>
<td style="text-align: right">h720dp、h1024dp等</td>
</tr>
<tr>
<td style="text-align: left">screen size</td>
<td style="text-align: right">small、normal、large、xlarge等</td>
</tr>
<tr>
<td style="text-align: left">screen aspect</td>
<td style="text-align: right">long、notlong</td>
</tr>
<tr>
<td style="text-align: left">screen orientation</td>
<td style="text-align: right">port、land</td>
</tr>
<tr>
<td style="text-align: left">UI mode</td>
<td style="text-align: right">car、desk、television等</td>
</tr>
<tr>
<td style="text-align: left">night mode</td>
<td style="text-align: right">night、notnight</td>
</tr>
<tr>
<td style="text-align: left">screen pixel density</td>
<td style="text-align: right">ldpi、mdpi、hdpi、xhdpi等</td>
</tr>
<tr>
<td style="text-align: left">touchscreen type</td>
<td style="text-align: right">notouch、finger</td>
</tr>
<tr>
<td style="text-align: left">keyboard availability</td>
<td style="text-align: right">keysexposed、keyshidden、keysoft</td>
</tr>
<tr>
<td style="text-align: left">primary text input method</td>
<td style="text-align: right">nokeys、qwerty、12key</td>
</tr>
<tr>
<td style="text-align: left">navigation key availability</td>
<td style="text-align: right">navexposed、 navhidden</td>
</tr>
<tr>
<td style="text-align: left">primary non-touch navigation method</td>
<td style="text-align: right">nonav、dpad、trackball等</td>
</tr>
<tr>
<td style="text-align: left">platform version(API level)</td>
<td style="text-align: right">v14、v16、v21等</td>
</tr>
</tbody></table>

<h2>代码编译阶段</h2>

<p>Android resource资源是通过aapt(Android Asset Package Tool)打包到应用apk中的，在打包之前会做以下三件事情</p>

<ul>
<li>将类型为res/animator、res/anim、res/color、res/drawable（非Bitmap文件，即非.png、.9.png、.jpg、.gif文件）、res/layout、res/menu、res/values和res/xml的资源文件会从文
本格式的XML文件编译成二进制格式的XML文件。

<ul>
<li>二进制格式的XML文件占用空间更小。这是由于所有XML元素的标签、属性名称、属性值和内容所涉及到的字符串都会被统一收集到一个字符串资源池中去，并且会去重。有了这个字符串资源池，原来使用字符串的
地方就会被替换成一个索引到字符串资源池的整数值，从而可以减少文件的大小。</li>
<li>二进制格式的XML文件解析速度更快。这是由于二进制格式的XML元素里面不再包含有字符串值，因此就避免了进行字符串解析，从而提高速度。</li>
</ul></li>
<li>赋予每一个非assets资源一个ID值，这些ID值以常量的形式定义在R.java文件中。</li>
<li>生成一个resources.arsc文件，用来描述具有ID值的资源的配置信息，它的内容就相当于是一个资源索引表。</li>
</ul>

<p>接下来我们就按照Android资源打包工具的执行流程来分析</p>

<ul>
<li>解析AndroidManifest.xml

<ul>
<li>解析AndroidManifest.xml是为了得到应用程序的包名称，有了包名称就可以创建ResourceTable对象了。

<ul>
<li>ResourceTable用来总体描述一个资源表，具体ResourceTable可以在源码/frameworks/base/tools/aapt目录下找到。</li>
</ul></li>
</ul></li>
<li>添加被引用资源包

<ul>
<li>在原生Android中，编译应用程序资源的时候，一般会涉及到两个包，其中一个是被引用的系统资源包（Android系统编译的时候会在out/target/common/obj/APPS/framework-res_intermediates
目录下生成一个package-export.apk），另外一个就是当前正在编译的应用程序资源包。当然一些第三方定制ROM也会有自己的资源包，也会被添加进来。</li>
</ul></li>
<li>收集资源文件

<ul>
<li>在编译应用程序之前，Android资源打包工具aapt会创建一个AaptAssets对象，用来收集需要编译的资源文件。

<ul>
<li>AaptAssets类可以在/frameworks/base/tools/aapt目录下可以找到。</li>
<li>收集到的资源是按照类型来保存的，在AaptAssets中有一个ResourceTypeSet的变量在记录。</li>
</ul></li>
</ul></li>
<li>将收集到的资源增加到资源表

<ul>
<li>将上一步收集到的资源文件同时增加到资源表中，即第一步创建的ResourceTable对象。注意，这一步不会将values类型的资源收集到资源表。</li>
</ul></li>
<li>编译values类资源

<ul>
<li>values类型的资源是在编译的过程中收集的，也会同样添加到ResourceTable对象中。</li>
</ul></li>
<li>给Bag资源分配ID

<ul>
<li>values类型的资源，如string、bag、style、plurals和array类的资源。这些资源会给自己定义一些专用的值，这些带有专用值的资源就统称为Bag资源。
在继续编译其它非values的资源之前，需要给之前收集到的Bag资源分配资源ID，因为它们可能会被其它非values类资源引用到。</li>
</ul></li>
<li>编译xml资源文件

<ul>
<li>这一步会编译除了values类型的所有资源。这一块比较繁杂，如果有兴趣可以单独研究，我就大概看了下。

<ul>
<li>解析xml文件</li>
<li>赋予属性名称资源ID</li>
<li>解析属性值</li>
<li>将xml文件转换为二进制格式</li>
<li>收集有资源ID的属性的名称字符串</li>
<li>收集其他字符串</li>
<li>写入xml文件头</li>
<li>写入字符串资源池</li>
<li>写入资源ID</li>
<li>将xml文件里边的字符串替换掉</li>
</ul></li>
</ul></li>
<li>生成资源符号

<ul>
<li>Android资源打包工具aapt只要遍历每一个ResourceTable对象里边的type，并根据entry的名称以及出现的次序来计算的到资源ID。</li>
</ul></li>
<li>生成资源索引表

<ul>
<li>这个过程就是生成resources.arsc的过程

<ul>
<li>收集类型字符串</li>
<li>收集资源项名称字符串</li>
<li>收集资源项值字符串</li>
<li>生成Package数据块（这一块同样略复杂）

<ul>
<li>写入Package资源项元信息数据块头部,这一块有一个比较注意的点就是，类似于Android或者第三方定制rom会在resource里边定义public标签的属性之，这个地方是为了保证不论何时编译，这些
属性值ID的唯一性。</li>
<li>写入字符串资源池</li>
<li>写入资源项名称字符串资源池</li>
<li>写入类型规范数据块</li>
<li>写入类型资源项数据块</li>
</ul></li>
<li>写入资源索引表头部</li>
<li>写入资源项的字符串资源池</li>
<li>写入Package数据块</li>
</ul></li>
</ul></li>
<li>编译AndroidManifest.xml

<ul>
<li>当前边步骤都进行完之后就会把AndroidManifest.xml也编译成二进制格式的xml文件，之所以要在应用程序的所有资源都编译完成之后再编译AndroidManifest，是因为后者可能会引用前者。</li>
</ul></li>
<li>生成R.java文件

<ul>
<li>前边步骤已经将所有资源以及对应的ID都收集起来了，直接写入到R.java中即可。</li>
</ul></li>
<li>打包APK文件

<ul>
<li>assets目录打包进apk</li>
<li>res目录打包进apk，除了res/values，因为values目录下的资源在编译的过程中都直接写入到资源索引表中去了，这也是为什么values类型资源会单独编译的原因。</li>
<li>资源索引文件resources.arsc打包进apk</li>
<li>AndroidManifest.xml打包进apk</li>
<li>其他文件打包进apk，比如class.dex、签名等。</li>
</ul></li>
</ul>

<h2>代码运行阶段　</h2>

<p>在代码运行阶段主要是通过AssetManager和Resources两个类来完成资源的加载的。Resources类根据ID（ID来源于之前生成并打包进apk的resources.arsc文件）来查找资源，AssetManager根据文件
名来查找资源。我们同样以一个Activity OnCreate的流程来分析</p>

<ul>
<li>Activity.setContentView
<code>java
/**
 * Set the activity content from a layout resource.  The resource will be
 * inflated, adding all top-level views to the activity.
 *
 * @param layoutResID Resource ID to be inflated.
 *
 * @see #setContentView(android.view.View)
 * @see #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)
 */
public void setContentView(int layoutResID) {
    getWindow().setContentView(layoutResID);
    initWindowDecorActionBar();
}
</code></li>
<li><p>PhoneWindow.setContentView
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>public void setContentView(int layoutResID) {
</span><span class='line'>    // Note: FEATURE&lt;em&gt;CONTENT&lt;/em&gt;TRANSITIONS may be set in the process of installing the window
</span><span class='line'>    // decor, when theme attributes and the like are crystalized. Do not check the feature
</span><span class='line'>    // before this happens.
</span><span class='line'>    if (mContentParent == null) {
</span><span class='line'>        installDecor();
</span><span class='line'>    } else if (!hasFeature(FEATURE&lt;em&gt;CONTENT&lt;/em&gt;TRANSITIONS)) {
</span><span class='line'>        mContentParent.removeAllViews();
</span><span class='line'>    }&lt;/p&gt;
</span><span class='line'>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {
</span><span class='line'>    final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,
</span><span class='line'>            getContext());
</span><span class='line'>    transitionTo(newScene);
</span><span class='line'>} else {
</span><span class='line'>    mLayoutInflater.inflate(layoutResID, mContentParent);
</span><span class='line'>}
</span><span class='line'>final Callback cb = getCallback();
</span><span class='line'>if (cb != null &amp;&amp; !isDestroyed()) {
</span><span class='line'>    cb.onContentChanged();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</span><span class='line'>&lt;p&gt;}</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>LayoutInflater.inflate
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Inflate a new view hierarchy from the specified xml resource. Throws
</span><span class='line'> * {@link InflateException} if there is an error.
</span><span class='line'> *
</span><span class='line'> * @param resource ID for an XML layout resource to load (e.g.,
</span><span class='line'> *        &lt;code&gt;R.layout.main_page&lt;/code&gt;)
</span><span class='line'> * @param root Optional view to be the parent of the generated hierarchy (if
</span><span class='line'> *        &lt;em&gt;attachToRoot&lt;/em&gt; is true), or else simply an object that
</span><span class='line'> *        provides a set of LayoutParams values for root of the returned
</span><span class='line'> *        hierarchy (if &lt;em&gt;attachToRoot&lt;/em&gt; is false.)
</span><span class='line'> * @param attachToRoot Whether the inflated hierarchy should be attached to
</span><span class='line'> *        the root parameter? If false, root is only used to create the
</span><span class='line'> *        correct subclass of LayoutParams for the root view in the XML.
</span><span class='line'> * @return The root View of the inflated hierarchy. If root was supplied and
</span><span class='line'> *         attachToRoot is true, this is root; otherwise it is the root of
</span><span class='line'> *         the inflated XML file.
</span><span class='line'> */
</span><span class='line'>public View inflate(int resource, ViewGroup root, boolean attachToRoot) {
</span><span class='line'>    final Resources res = getContext().getResources();
</span><span class='line'>    if (DEBUG) {
</span><span class='line'>        Log.d(TAG, &quot;INFLATING from resource: \&quot;&quot; + res.getResourceName(resource) + &quot;\&quot; (&quot;
</span><span class='line'>                + Integer.toHexString(resource) + &quot;)&quot;);
</span><span class='line'>    }&lt;/p&gt;
</span><span class='line'>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;final XmlResourceParser parser = res.getLayout(resource);
</span><span class='line'>try {
</span><span class='line'>    return inflate(parser, root, attachToRoot);
</span><span class='line'>} finally {
</span><span class='line'>    parser.close();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</span><span class='line'>&lt;p&gt;}</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>最终调用到了Resource.getLayout</li>
</ul></li>
<li><p>Resources.getLayout
<code>
/**
 * Return an XmlResourceParser through which you can read a view layout
 * description for the given resource ID.  This parser has limited
 * functionality -- in particular, you can&#39;t change its input, and only
 * the high-level events are available.
 *
 * &lt;p&gt;This function is really a simple wrapper for calling
 * {@link #getXml} with a layout resource.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return A new parser object through which you can read
 *         the XML data.
 *
 * @see #getXml
 */
public XmlResourceParser getLayout(int id) throws NotFoundException {
    return loadXmlResourceParser(id, &quot;layout&quot;);
}
</code></p></li>
<li><p>Resources.loadXmlResourceParser</p></li>
<li><p>Resources.getValue</p></li>
<li><p>AssetManager.getResourceValue</p></li>
<li><p>AssetManager.loadResourceValue</p>

<ul>
<li>这是一个native方法，对应到android<em>content</em>AssetManager<em>loadResourceValue函数，这个函数定义在文件frameworks/base/core/jni/android</em>util_AssetManager.cpp中。
得到的资源项值及其配置信息拷贝到参数outValue所描述的一个Java层的TypedValue对象中。这个地方会有一个ResTable的对象用来记录一系列数据。</li>
</ul></li>
<li><p>AssetManager.getResources</p>

<ul>
<li>AssetManager类的成员函数getResources的实现看起来比较复杂，但是它要做的事情就是解析当前应用程序所使用的资源包里面的resources.arsc文件。</li>
</ul></li>
<li><p>ResTable.getResource</p>

<ul>
<li>根据之前AssetManager.loadResourceValue得到的各种信息，在上一步解析resources.arsc得到的数据中get到相应的value值。这一块的逻辑处理非常复杂，我并没有深入研究下去。</li>
</ul></li>
<li><p>ResTable.resolveReference</p>

<ul>
<li>ResTable类的成员函数resolveReference的实现其实很简单，它就是对参数value所描述的一个资源项值进行解析。</li>
</ul></li>
<li><p>Resources.loadXmlResourceParser
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/&lt;em&gt;package&lt;/em&gt;/ XmlResourceParser loadXmlResourceParser(String file, int id,
</span><span class='line'>        int assetCookie, String type) throws NotFoundException {
</span><span class='line'>    if (id != 0) {
</span><span class='line'>        try {
</span><span class='line'>            // These may be compiled...
</span><span class='line'>            synchronized (mCachedXmlBlockIds) {
</span><span class='line'>                // First see if this block is in our cache.
</span><span class='line'>                final int num = mCachedXmlBlockIds.length;
</span><span class='line'>                for (int i=0; i&lt;num; i++) {
</span><span class='line'>                    if (mCachedXmlBlockIds[i] == id) {
</span><span class='line'>                        //System.out.println(&quot;**** REUSING XML BLOCK!  id=&quot;
</span><span class='line'>                        //                   + id + &quot;, index=&quot; + i);
</span><span class='line'>                        return mCachedXmlBlocks[i].newParser();
</span><span class='line'>                    }
</span><span class='line'>                }&lt;/p&gt;
</span><span class='line'>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;            // Not in the cache, create a new block and put it at
</span><span class='line'>            // the next slot in the cache.
</span><span class='line'>            XmlBlock block = mAssets.openXmlBlockAsset(
</span><span class='line'>                    assetCookie, file);
</span><span class='line'>            if (block != null) {
</span><span class='line'>                int pos = mLastCachedXmlBlockIndex+1;
</span><span class='line'>                if (pos &gt;= num) pos = 0;
</span><span class='line'>                mLastCachedXmlBlockIndex = pos;
</span><span class='line'>                XmlBlock oldBlock = mCachedXmlBlocks[pos];
</span><span class='line'>                if (oldBlock != null) {
</span><span class='line'>                    oldBlock.close();
</span><span class='line'>                }
</span><span class='line'>                mCachedXmlBlockIds[pos] = id;
</span><span class='line'>                mCachedXmlBlocks[pos] = block;
</span><span class='line'>                //System.out.println(&quot;**** CACHING NEW XML BLOCK!  id=&quot;
</span><span class='line'>                //                   + id + &quot;, index=&quot; + pos);
</span><span class='line'>                return block.newParser();
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    } catch (Exception e) {
</span><span class='line'>        NotFoundException rnf = new NotFoundException(
</span><span class='line'>                &quot;File &quot; + file + &quot; from xml type &quot; + type + &quot; resource ID #0x&quot;
</span><span class='line'>                + Integer.toHexString(id));
</span><span class='line'>        rnf.initCause(e);
</span><span class='line'>        throw rnf;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>throw new NotFoundException(
</span><span class='line'>        &quot;File &quot; + file + &quot; from xml type &quot; + type + &quot; resource ID #0x&quot;
</span><span class='line'>        + Integer.toHexString(id));
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</span><span class='line'>&lt;p&gt;}</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>AssetManager.openXmlBlockAsset
<code>
/**
 * {@hide}
 * Retrieve a non-asset as a compiled XML file.  Not for use by
 * applications.
 *
 * @param cookie Identifier of the package to be opened.
 * @param fileName Name of the asset to retrieve.
 */
/*package*/ final XmlBlock openXmlBlockAsset(int cookie, String fileName)
    throws IOException {
    synchronized (this) {
        if (!mOpen) {
            throw new RuntimeException(&quot;Assetmanager has been closed&quot;);
        }
        long xmlBlock = openXmlAssetNative(cookie, fileName);
        if (xmlBlock != 0) {
            XmlBlock res = new XmlBlock(this, xmlBlock);
            incRefsLocked(res.hashCode());
            return res;
        }
    }
    throw new FileNotFoundException(&quot;Asset XML file: &quot; + fileName);
}
</code></p></li>
<li><p>AssetManager.openXmlAssetNative</p></li>
</ul>

<p>...</p>

<p>这中间有一系列的native方法调用</p>

<ul>
<li>LayoutInflater.inflate

<ul>
<li>这一步根据之前得到的Parser对象来继续进行</li>
</ul></li>
<li>LayoutInflater.createViewFromTag

<ul>
<li>根据应用的属性值得到一个view</li>
</ul></li>
<li>PhoneLayoutInflater.onCreateView</li>
<li>LayoutInflater.createView</li>
</ul>

<p>这一块会有一个疑问，应用是如何找到Android系统资源的？在之前提到的编译阶段，系统提供的apk资源包的资源也会被收集进来，那么运行阶段是如何找到的呢？</p>

<p>系统的资源打包在/system/framework/framework-res.apk文件中，它在应用程序进程中是通过一个单独的Resources对象和一个单独的AssetManager对象来管理的。这个单独的Resources
对象就保存在Resources类的静态成员变量mSystem中，我们可以通过Resources类的静态成员函数getSystem就可以获得这个Resources对象，而这个单独的AssetManager对象就保存在AssetManager
类的静态成员变量sSystem中，我们可以通过AssetManager类的静态成员函数getSystem同样可以获得这个AssetManager对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Develop Tips(一)]]></title>
    <link href="http://fanhongwei.github.io/blog/2014/12/11/android-develop-tip/"/>
    <updated>2014-12-11T00:07:34+08:00</updated>
    <id>http://fanhongwei.github.io/blog/2014/12/11/android-develop-tip</id>
    <content type="html"><![CDATA[<h2>Android常用项目结构</h2>

<p>在Android的开发过程中一直在不断的调整自己对于项目结构的架构方式，经过了多次的调整之后，现在基本每个项目都会以如下方式来架构：</p>

<ul>
<li><strong><em>api</em></strong>
放置一些API口类</li>
<li><strong><em>app</em></strong>
放置一些与整个东西pp相关的类，如继承自Application的当前应用的Appliation类、继承自系统Resources写的当前应用的Resurces类、应用的版本管理VersionManager类等</li>
<li><strong><em>bean</em></strong>
主要用来放置java bean的类</li>
<li><strong><em>io</em></strong>
放置一些io操作的类，如网络请求、文件读写、数据库操作等等</li>
<li><strong><em>provider</em></strong>
放置provider相关的类</li>
<li><strong><em>receiver</em></strong><br>
放置整应用里边需要的reiver类</li>
<li><strong><em>service</em></strong>
放置整个应用里边的sevice类</li>
<li><strong><em>ui</em></strong>

<ul>
<li><strong><em>activity</em></strong>
整个应用的actvity类</li>
<li><strong><em>adapter</em></strong>
整个应用的adapter类</li>
<li><strong><em>controller</em></strong>
整个用中用到的ew层进行操纵的roller类</li>
<li><strong><em>fragment</em></strong>
整个应中的fragemnt类</li>
<li><strong><em>util</em></strong>
对应用中ui进行操作的一些helper类</li>
<li><strong><em>view</em></strong>
整个应中可以分离出来的view</li>
<li><strong><em>widget</em></strong>
整个应用的自定义控件</li>
</ul></li>
<li><strong><em>util</em></strong>
各种各样的工具类</li>
</ul>

<p>我现在基本上每个项目都是这种架构方式了，另外，我习惯将自己平时的积累的一些工具类之类的类整理到一个Common的library module中，自己的每个项目都会把这个common module倒入进来，这样子方便了很多。</p>

<!--more-->

<h2>Gradle</h2>

<p>Gradle只是提供了一个构建项目的框架,然后通过各种各样的Plugin来构建我们自己的项目。Gradle本身的领域对象主要有Project和Task，Project为task的执行提供了上下文。Gradle默认会将当前目录下的build.gradle作为项目的构建文件。接下来以一个实际项目为例类详细介绍gradle构建Android项目。</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">application</span><span class="err">&#39;</span>

<span class="n">android</span> <span class="o">{</span>
    <span class="n">compileSdkVersion</span> <span class="mi">21</span>
    <span class="n">buildToolsVersion</span> <span class="err">&#39;</span><span class="mf">21.1</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span>

    <span class="n">defaultConfig</span> <span class="o">{</span>
        <span class="n">applicationId</span> <span class="s">&quot;us.drilight.android&quot;</span>
        <span class="n">minSdkVersion</span> <span class="mi">14</span>
        <span class="n">targetSdkVersion</span> <span class="mi">21</span>
        <span class="n">versionCode</span> <span class="mi">1</span>
        <span class="n">versionName</span> <span class="s">&quot;1.0&quot;</span>
    <span class="o">}</span>

    <span class="n">lintOptions</span> <span class="o">{</span>
        <span class="n">checkReleaseBuilds</span> <span class="kc">false</span>
        <span class="c1">// Or, if you prefer, you can continue to check for errors in release builds,</span>
        <span class="c1">// but continue the build even when errors are found:</span>
        <span class="n">abortOnError</span> <span class="kc">false</span>
    <span class="o">}</span>

    <span class="n">signingConfigs</span> <span class="o">{</span>
        <span class="n">YourApp</span> <span class="o">{</span>
            <span class="n">storeFile</span> <span class="nf">file</span><span class="o">(</span><span class="s">&quot;Your keystore path&quot;</span><span class="o">)</span>
            <span class="n">storePassword</span> <span class="s">&quot;Your keystore password&quot;</span>
            <span class="n">keyAlias</span> <span class="s">&quot;Your keyAlias&quot;</span>
            <span class="n">keyPassword</span> <span class="s">&quot;Your keyPassword&quot;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">buildTypes</span> <span class="o">{</span>
        <span class="n">release</span> <span class="o">{</span>
            <span class="n">signingConfig</span> <span class="n">signingConfigs</span><span class="o">.</span><span class="na">YourApp</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">sourceSets</span> <span class="o">{</span>
        <span class="n">main</span> <span class="o">{</span>
            <span class="n">jniLibs</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">]</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">productFlavors</span> <span class="o">{</span>
        <span class="n">baidu_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;baidu_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">meizu_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;meizu_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">mumayi_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;mumayi_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">xiaomi_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;xiaomi_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">wandoujia_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;wandoujia_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">play_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;play_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span>
    <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="n">common</span><span class="err">&#39;</span><span class="o">)</span>
    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">io</span><span class="o">.</span><span class="na">realm</span><span class="o">:</span><span class="n">realm</span><span class="o">-</span><span class="nl">android:</span><span class="mf">0.71</span><span class="o">.</span><span class="mi">0</span><span class="err">&#39;</span>
    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">code</span><span class="o">.</span><span class="na">gson</span><span class="o">:</span><span class="nl">gson:</span><span class="mf">2.3</span><span class="err">&#39;</span>
    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">mcxiaoke</span><span class="o">.</span><span class="na">volley</span><span class="o">:</span><span class="nl">library:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
<span class="o">}</span>
</code></pre></div>
<p><code>apply plugin: &#39;com.android.application&#39;</code> 显然这是一个构建Android项目Gradle Plugin，另外，如果希望当前module是以一个library project被编译的话应该使用 <code>apply plugin: &#39;com.android.library&#39;</code> 这个plugin。</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">android</span><span class="o">{</span>
<span class="o">}</span>

<span class="n">这一块是plugin中的android</span> <span class="n">project构建</span><span class="err">。</span>
</code></pre></div><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">compileSdkVersion</span> <span class="mi">21</span>
<span class="n">buildToolsVersion</span> <span class="err">&#39;</span><span class="mf">21.1</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span>

<span class="n">这一块是用来指定CompileSdkVersion和BuildToolsVersion的</span><span class="err">。</span>
</code></pre></div><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">defaultConfig</span> <span class="o">{</span>
        <span class="n">applicationId</span> <span class="s">&quot;us.drilight.android&quot;</span>
        <span class="n">minSdkVersion</span> <span class="mi">14</span>
        <span class="n">targetSdkVersion</span> <span class="mi">21</span>
        <span class="n">versionCode</span> <span class="mi">1</span>
        <span class="n">versionName</span> <span class="s">&quot;1.0&quot;</span>
    <span class="o">}</span>

<span class="n">这一块是用来对project进行一个初步的配置</span><span class="err">，</span><span class="n">包括applicationId</span><span class="o">,</span><span class="n">minSdkVersion</span><span class="o">,</span><span class="n">versionCode</span><span class="o">,</span><span class="n">versionName</span><span class="err">。</span>
<span class="n">这个地方有个需要注意的就是在gradle构建的project中versionCode和versionName以这个地方的为准</span><span class="err">，</span>
<span class="n">AndroidMainfest</span><span class="o">.</span><span class="na">xml中关于这一块的配置不再有效</span><span class="err">。</span>
</code></pre></div><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">lintOptions</span> <span class="o">{</span>
        <span class="n">checkReleaseBuilds</span> <span class="kc">false</span>
        <span class="c1">// Or, if you prefer, you can continue to check for errors in release builds,</span>
        <span class="c1">// but continue the build even when errors are found:</span>
        <span class="n">abortOnError</span> <span class="kc">false</span>
    <span class="o">}</span>

<span class="n">这一块主要是对编译过程的配置</span><span class="err">，</span><span class="n">如果这个地方不做处理的话</span><span class="err">，</span><span class="n">在编译的时候就连warning之类的都会导致编译通不过</span><span class="err">，</span><span class="n">所以配</span>
<span class="n">置这一块基本是必须的</span><span class="err">。</span>
</code></pre></div><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">signingConfigs</span> <span class="o">{</span>
        <span class="n">YourApp</span> <span class="o">{</span>
            <span class="n">storeFile</span> <span class="nf">file</span><span class="o">(</span><span class="s">&quot;Your keystore path&quot;</span><span class="o">)</span>
            <span class="n">storePassword</span> <span class="s">&quot;Your keystore password&quot;</span>
            <span class="n">keyAlias</span> <span class="s">&quot;Your keyAlias&quot;</span>
            <span class="n">keyPassword</span> <span class="s">&quot;Your keyPassword&quot;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">buildTypes</span> <span class="o">{</span>
        <span class="n">release</span> <span class="o">{</span>
            <span class="n">signingConfig</span> <span class="n">signingConfigs</span><span class="o">.</span><span class="na">YourApp</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="n">这一块是对签名的配置</span>
</code></pre></div><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">sourceSets</span> <span class="o">{</span>
        <span class="n">main</span> <span class="o">{</span>
            <span class="n">jniLibs</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">]</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="n">这一块主要是对sourceSet的配置这个配置可以将libs下的</span><span class="o">.</span><span class="na">so库编译进当前project</span><span class="err">。</span><span class="n">sourceSets这一块Android</span>
<span class="n">Studio会默认配置</span><span class="err">，</span><span class="n">当然也可以自己写比如</span><span class="err">：</span>
<span class="o">(</span>
<span class="n">java</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="err">&#39;</span><span class="o">]</span>
<span class="n">resources</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="err">&#39;</span><span class="o">]</span>
<span class="n">idl</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="err">&#39;</span><span class="o">]</span>
<span class="n">renderscript</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="err">&#39;</span><span class="o">]</span>
<span class="n">res</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">res</span><span class="err">&#39;</span><span class="o">]</span>
<span class="n">assets</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">assets</span><span class="err">&#39;</span><span class="o">])</span>
<span class="n">这个视个人项目文件结构来具体配置</span><span class="err">。</span>
</code></pre></div><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">productFlavors</span> <span class="o">{</span>
        <span class="n">baidu_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;baidu_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">meizu_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;meizu_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">mumayi_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;mumayi_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">xiaomi_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;xiaomi_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">wandoujia_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;wandoujia_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="n">play_market</span> <span class="o">{</span>
            <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">UMENG_CHANNEL_VALUE:</span> <span class="s">&quot;play_market&quot;</span><span class="o">]</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="n">这一块是对多渠道包的配置</span><span class="err">，</span><span class="n">具体每一个渠道包的包名等等之类的信息都可以在这个地方配置</span><span class="err">，</span><span class="n">示例中是每一个</span>
<span class="n">productFlavor中加入了友盟的多渠道信息统计</span><span class="err">。</span>
</code></pre></div><div class="highlight"><pre><code class="language-java" data-lang="java"> <span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span>
    <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="n">common</span><span class="err">&#39;</span><span class="o">)</span>
    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">io</span><span class="o">.</span><span class="na">realm</span><span class="o">:</span><span class="n">realm</span><span class="o">-</span><span class="nl">android:</span><span class="mf">0.71</span><span class="o">.</span><span class="mi">0</span><span class="err">&#39;</span>
    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">code</span><span class="o">.</span><span class="na">gson</span><span class="o">:</span><span class="nl">gson:</span><span class="mf">2.3</span><span class="err">&#39;</span>
    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">mcxiaoke</span><span class="o">.</span><span class="na">volley</span><span class="o">:</span><span class="nl">library:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
<span class="o">}</span>

<span class="n">这一块是对第三方依赖的配置</span><span class="err">。</span><span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span> <span class="n">这个是将当前module项目</span>
<span class="n">目录下的所有jar包以lib的形式编译到当前project中来</span><span class="err">。</span> <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="n">common</span><span class="err">&#39;</span><span class="o">)</span> <span class="n">这个的话是将第三方的</span>
<span class="n">library</span> <span class="n">project编译进当前project</span><span class="err">，</span><span class="n">这个地方要注意的是得先在settings</span><span class="o">.</span><span class="na">build中声明这个library</span><span class="o">,</span><span class="n">类似这样的</span>
<span class="n">include</span> <span class="err">&#39;</span><span class="o">:</span><span class="n">app</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">:</span><span class="n">Common</span><span class="err">&#39;</span> <span class="err">。</span> <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">code</span><span class="o">.</span><span class="na">gson</span><span class="o">:</span><span class="nl">gson:</span><span class="mf">2.3</span><span class="err">&#39;</span> <span class="n">这个是通过从远程maven仓库的</span>
<span class="n">形式来编译第三方library到当前project</span><span class="err">，</span><span class="n">我个人现在目前更倾向于这种形式导入第三方library</span><span class="err">。</span>
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android-FeedBack]]></title>
    <link href="http://fanhongwei.github.io/blog/2014/04/16/android-feedback/"/>
    <updated>2014-04-16T21:24:00+08:00</updated>
    <id>http://fanhongwei.github.io/blog/2014/04/16/android-feedback</id>
    <content type="html"><![CDATA[<h1>选择</h1>

<p>之前开发OverHust的时候，需要用到用户反馈这一功能，于是就在考虑怎么实现<strong>用户反馈</strong>这一功能。</p>

<p>目前，常规方法如下：</p>

<blockquote>
<ul>
<li><p>利用第三方服务，例如：<a href="http://www.umeng.com/">友盟</a></p></li>
<li><p>调用用户已登录的邮箱帐号发送邮件</p></li>
</ul>
</blockquote>

<h4>利用第三方服务</h4>

<p><code>优点</code>：使用第三方服务，只需要调用接口，简单粗暴。</p>

<p><code>缺点</code>：导入Library工程，自定义度不高。如果仅仅会用到第三方的用户反馈这一服务的话，更没必要导入别人的Library工程。</p>

<h4>调用用户已登录的邮箱帐号发送邮件</h4>

<p><code>优点</code>：直接调用系统的发送邮件服务，更加简单粗暴。</p>

<p><code>缺点</code>：如果用户没有在系统中登录邮箱帐号，那就悲剧了。</p>

<!--more-->

<p><em>详细了解上述两种方法各自的优劣之后,发现他们都不能很好的满足需求，因此，另谋出路。于是就在stackoverflow上发现可以用<code>JavaMail API</code>来实现。首先，不用导入一些其他Library工程，其次虽然也是用邮件服务，但是发信邮件帐号是在应用内指定的，与用户无关。当然，也是由于我自己想体验一下<code>JavaMail API</code>，之后开发应用还是更多的会用第三方服务，因为第三方服务有很多我用的着的功能。</em></p>

<h1>实现</h1>

<p>具体实现是参照stackoverflow上的 <a href="http://stackoverflow.com/questions/2020088/sending-email-in-android-using-javamail-api-without-using-the-default-built-in-a">Sending Email in Android using JavaMail API without using the default/built-in app</a></p>

<p>首先，在工程中导入这三个jar, <a href="http://javamail-android.googlecode.com/files/mail.jar">mail.jar</a> , <a href="http://javamail-android.googlecode.com/files/activation.jar">activation.jar</a> , <a href="http://javamail-android.googlecode.com/files/additionnal.jar">additionnal.jar</a>.</p>

<p>之后，写几个工具类就ok了（附上我项目中的这几个类）。</p>

<p><a href="https://github.com/fanhongwei/OverHust/blob/master/OverHust/src/main/java/com/unique/overhust/Feedback/JSSEProvider.java">JSSEProvider,java</a>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">unique</span><span class="o">.</span><span class="na">overhust</span><span class="o">.</span><span class="na">Feedback</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.security.AccessController</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.Provider</span><span class="o">;</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by fhw on 12/27/13.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">JSSEProvider</span> <span class="kd">extends</span> <span class="n">Provider</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;language-text&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">lang</span><span class="o">=</span><span class="s">&quot;text&quot;</span><span class="o">&gt;</span><span class="kd">public</span> <span class="nf">JSSEProvider</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">HarmonyJSSE</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span> <span class="mf">1.0</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">Harmony</span> <span class="n">JSSE</span> <span class="n">Provider</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>    <span class="n">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">PrivilegedAction</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Void</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">put</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">SSLContext</span><span class="o">.</span><span class="na">TLS</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span>
</span><span class='line'>                    <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">xnet</span><span class="o">.</span><span class="na">provider</span><span class="o">.</span><span class="na">jsse</span><span class="o">.</span><span class="na">SSLContextImpl</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>            <span class="n">put</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">Alg</span><span class="o">.</span><span class="na">Alias</span><span class="o">.</span><span class="na">SSLContext</span><span class="o">.</span><span class="na">TLSv1</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">TLS</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>            <span class="n">put</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">KeyManagerFactory</span><span class="o">.</span><span class="na">X509</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span>
</span><span class='line'>                    <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">xnet</span><span class="o">.</span><span class="na">provider</span><span class="o">.</span><span class="na">jsse</span><span class="o">.</span><span class="na">KeyManagerFactoryImpl</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>            <span class="n">put</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">TrustManagerFactory</span><span class="o">.</span><span class="na">X509</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span>
</span><span class='line'>                    <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">xnet</span><span class="o">.</span><span class="na">provider</span><span class="o">.</span><span class="na">jsse</span><span class="o">.</span><span class="na">TrustManagerFactoryImpl</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a href="https://github.com/fanhongwei/OverHust/blob/master/OverHust/src/main/java/com/unique/overhust/Feedback/GmailSender.java">GmailSender.java</a>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">unique</span><span class="o">.</span><span class="na">overhust</span><span class="o">.</span><span class="na">Feedback</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">javax.activation.DataHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.activation.DataSource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Authenticator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Message</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.PasswordAuthentication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Session</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Transport</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.internet.InternetAddress</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.internet.MimeMessage</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.io.ByteArrayInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.OutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.Security</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by fhw on 12/27/13.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GmailSender</span> <span class="kd">extends</span> <span class="n">Authenticator</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">mailhost</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">smtp</span><span class="o">.</span><span class="na">gmail</span><span class="o">.</span><span class="na">com</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Session</span> <span class="n">session</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;language-text&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">lang</span><span class="o">=</span><span class="s">&quot;text&quot;</span><span class="o">&gt;</span><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Security</span><span class="o">.</span><span class="na">addProvider</span><span class="o">(</span><span class="k">new</span> <span class="nf">JSSEProvider</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">GmailSender</span><span class="o">(</span><span class="n">String</span> <span class="n">user</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">user</span> <span class="o">=</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Properties</span><span class="o">();</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">mail</span><span class="o">.</span><span class="na">transport</span><span class="o">.</span><span class="na">protocol</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">smtp</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">mail</span><span class="o">.</span><span class="na">host</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span> <span class="n">mailhost</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">mail</span><span class="o">.</span><span class="na">smtp</span><span class="o">.</span><span class="na">auth</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="kc">true</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">mail</span><span class="o">.</span><span class="na">smtp</span><span class="o">.</span><span class="na">port</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="mi">465</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">mail</span><span class="o">.</span><span class="na">smtp</span><span class="o">.</span><span class="na">socketFactory</span><span class="o">.</span><span class="na">port</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="mi">465</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">mail</span><span class="o">.</span><span class="na">smtp</span><span class="o">.</span><span class="na">socketFactory</span><span class="o">.</span><span class="na">class</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">javax</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketFactory</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">mail</span><span class="o">.</span><span class="na">smtp</span><span class="o">.</span><span class="na">socketFactory</span><span class="o">.</span><span class="na">fallback</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="kc">false</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">mail</span><span class="o">.</span><span class="na">smtp</span><span class="o">.</span><span class="na">quitwait</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="kc">false</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span> <span class="o">=</span> <span class="n">Session</span><span class="o">.</span><span class="na">getDefaultInstance</span><span class="o">(</span><span class="n">props</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">protected</span> <span class="n">PasswordAuthentication</span> <span class="nf">getPasswordAuthentication</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">PasswordAuthentication</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">sendMail</span><span class="o">(</span><span class="n">String</span> <span class="n">subject</span><span class="o">,</span> <span class="n">String</span> <span class="n">body</span><span class="o">,</span> <span class="n">String</span> <span class="n">sender</span><span class="o">,</span> <span class="n">String</span> <span class="n">recipients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MimeMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MimeMessage</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
</span><span class='line'>        <span class="n">DataHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DataHandler</span><span class="o">(</span><span class="k">new</span> <span class="nf">ByteArrayDataSource</span><span class="o">(</span><span class="n">body</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">text</span><span class="o">/</span><span class="n">plain</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;));</span>
</span><span class='line'>        <span class="n">message</span><span class="o">.</span><span class="na">setSender</span><span class="o">(</span><span class="k">new</span> <span class="nf">InternetAddress</span><span class="o">(</span><span class="n">sender</span><span class="o">));</span>
</span><span class='line'>        <span class="n">message</span><span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class='line'>        <span class="n">message</span><span class="o">.</span><span class="na">setDataHandler</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">recipients</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(&amp;</span><span class="err">#</span><span class="mi">39</span><span class="o">;,&amp;</span><span class="err">#</span><span class="mi">39</span><span class="o">;)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setRecipients</span><span class="o">(</span><span class="n">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="n">InternetAddress</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">recipients</span><span class="o">));</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setRecipient</span><span class="o">(</span><span class="n">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="k">new</span> <span class="nf">InternetAddress</span><span class="o">(</span><span class="n">recipients</span><span class="o">));</span>
</span><span class='line'>        <span class="n">Transport</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">gmailsender</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">ok</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">ecption</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;,&amp;</span><span class="n">quot</span><span class="o">;&amp;</span><span class="n">quot</span><span class="o">;+</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ByteArrayDataSource</span> <span class="kd">implements</span> <span class="n">DataSource</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ByteArrayDataSource</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">,</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ByteArrayDataSource</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setType</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getContentType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">application</span><span class="o">/</span><span class="n">octet</span><span class="o">-</span><span class="n">stream</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">InputStream</span> <span class="nf">getInputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">ByteArrayDataSource</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">OutputStream</span> <span class="nf">getOutputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(&amp;</span><span class="n">quot</span><span class="o">;</span><span class="n">Not</span> <span class="n">Supported</span><span class="o">&amp;</span><span class="n">quot</span><span class="o">;);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
最后，自己封装一个发送邮件的工具类。</p>

<p><a href="https://github.com/fanhongwei/OverHust/blob/master/OverHust/src/main/java/com/unique/overhust/Feedback/SendFeedback.java">SendFeedback.java</a></p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">unique</span><span class="o">.</span><span class="na">overhust</span><span class="o">.</span><span class="na">Feedback</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.os.AsyncTask</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.os.Build</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.telephony.TelephonyManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.unique.overhust.CommonUtils.ShareContext</span><span class="o">;</span>

<span class="cm">/**</span>
<span class="cm"> * Created by fhw on 12/27/13.</span>
<span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SendFeedback</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">feedbackBody</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">feedbackContact</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">handsetinfo</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mType</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SendFeedback</span><span class="o">(</span><span class="n">String</span> <span class="n">fdBody</span><span class="o">,</span> <span class="n">String</span> <span class="n">fdContact</span><span class="o">,</span> <span class="kt">int</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">feedbackBody</span> <span class="o">=</span> <span class="n">fdBody</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">feedbackContact</span> <span class="o">=</span> <span class="n">fdContact</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mType</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
        <span class="n">getHandsetinfo</span><span class="o">();</span>
        <span class="k">new</span> <span class="nf">SendEmailTask</span><span class="o">(</span><span class="n">feedbackBody</span><span class="o">,</span> <span class="n">feedbackContact</span><span class="o">,</span> <span class="n">mType</span><span class="o">).</span><span class="na">execute</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getHandsetinfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">TelephonyManager</span> <span class="n">tm</span> <span class="o">=</span> <span class="o">(</span><span class="n">TelephonyManager</span><span class="o">)</span> <span class="n">ShareContext</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">TELEPHONY_SERVICE</span><span class="o">);</span>
        <span class="n">handsetinfo</span> <span class="o">=</span> <span class="s">&quot;手机型号:&quot;</span> <span class="o">+</span> <span class="n">Build</span><span class="o">.</span><span class="na">MODEL</span> <span class="o">+</span>
                <span class="s">&quot;,SDK版本:&quot;</span> <span class="o">+</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK</span> <span class="o">+</span>
                <span class="s">&quot;,系统版本:&quot;</span> <span class="o">+</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">RELEASE</span> <span class="o">+</span>
                <span class="s">&quot;,手机厂商:&quot;</span> <span class="o">+</span> <span class="n">Build</span><span class="o">.</span><span class="na">MANUFACTURER</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">handsetinfo</span> <span class="o">=</span> <span class="n">handsetinfo</span> <span class="o">+</span> <span class="s">&quot;,设备ID:&quot;</span> <span class="o">+</span> <span class="n">tm</span><span class="o">.</span><span class="na">getDeviceId</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;exception&quot;</span><span class="o">,</span><span class="s">&quot;&quot;</span><span class="o">+</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">handsetinfo</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">class</span> <span class="nc">SendEmailTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">subject</span> <span class="o">=</span> <span class="s">&quot;用户反馈&quot;</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">installSubject</span> <span class="o">=</span> <span class="s">&quot;安装信息&quot;</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">recipients</span> <span class="o">=</span> <span class="s">&quot;overhustdsnc@gmail.com&quot;</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">String</span> <span class="n">mFeedbackBody</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">String</span> <span class="n">mFeedbackContact</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">Type</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">SendEmailTask</span><span class="o">(</span><span class="n">String</span> <span class="n">feedbackBody</span><span class="o">,</span> <span class="n">String</span> <span class="n">feedbackContact</span><span class="o">,</span> <span class="kt">int</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">mFeedbackBody</span> <span class="o">=</span> <span class="n">feedbackBody</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">mFeedbackContact</span> <span class="o">=</span> <span class="n">feedbackContact</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">Type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="n">Void</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Void</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">Type</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">GmailSender</span> <span class="n">sender</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">GmailSender</span><span class="o">(</span><span class="s">&quot;YourGmailAccount&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
                    <span class="n">sender</span><span class="o">.</span><span class="na">sendMail</span><span class="o">(</span><span class="n">subject</span><span class="o">,</span> <span class="s">&quot;反馈内容:\n&quot;</span> <span class="o">+</span> <span class="n">mFeedbackBody</span> <span class="o">+</span> <span class="s">&quot;\n\n&quot;</span> <span class="o">+</span> <span class="s">&quot;联系方式:\n&quot;</span> <span class="o">+</span> <span class="n">mFeedbackContact</span> <span class="o">+</span> <span class="s">&quot;\n\n手机信息:\n&quot;</span> <span class="o">+</span> <span class="n">handsetinfo</span><span class="o">,</span> <span class="n">recipients</span><span class="o">,</span> <span class="n">recipients</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">Type</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">GmailSender</span> <span class="n">sender</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">GmailSender</span><span class="o">(</span><span class="s">&quot;YourGmailAccount&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
                    <span class="n">sender</span><span class="o">.</span><span class="na">sendMail</span><span class="o">(</span><span class="n">installSubject</span><span class="o">,</span> <span class="n">mFeedbackBody</span><span class="o">+</span><span class="n">mFeedbackContact</span><span class="o">+</span><span class="s">&quot;手机信息:\n&quot;</span> <span class="o">+</span> <span class="n">handsetinfo</span><span class="o">,</span> <span class="n">recipients</span><span class="o">,</span> <span class="n">recipients</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;SendMail&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Void</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>

        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MentalModel开发心得]]></title>
    <link href="http://fanhongwei.github.io/blog/2013/10/28/mental-model/"/>
    <updated>2013-10-28T08:39:00+08:00</updated>
    <id>http://fanhongwei.github.io/blog/2013/10/28/mental-model</id>
    <content type="html"><![CDATA[<p>学校工业设计系一个实验室的老师在研究Android的交互设计，研究到人的心智模型这一块时，需要做一个实验，然后呢，就要用到一个Android的App，最后我帮他做了这个App，这期间有很多的体会和经验，写下来留给自己看。</p>

<p>这个应用大概是这样子的：</p>

<p><img src="http://fanhongwei.github.io/images/实验2.jpg" width="250" height="400"/> <img src="http://fanhongwei.github.io/images/testtwo.png" width="250" height="400" /></p>

<!--more-->

<p><img src="http://fanhongwei.github.io/images/testthree.png" width="250" height="400" /> <img src="http://fanhongwei.github.io/images/image.png" width="250" height="400" /></p>

<p>由于是实验型的App，这里边有将近45个页面，刚接触到这个应用时由于跟那老师的交流出了点问题，所以对应用的理解有偏差，没意识到会有这么多的界面，于是乎我就把没一个页面当作一个activity，开始一个新的页面activity是结束掉上一个页面的activity，当工程进行到后边时，深刻体会到了这种思路的缺陷。这应该也是第一次做到会有如此多的布局的App，深刻体会到了命名规范的好处。比如说，总共有四个实验，而每个实验有12中模式，那么对布局文件的命名很值得考量一番，要不会很乱的。</p>

<p>这个App实验三和实验四是图形模式或者flash模式，并且每种模式大概会有20张左右的图片，如果不用listview去分批加载的话，就会出现内存溢出的问题，由于我刚开始是在genymotion上的调试的一直没遇到这问题，也没去考虑，当准备开始测试的时候，在真机上调试之后很容易就出现了这个问题，一下子加载20张图片，这。。。最终，是用listview解决的这个问题。</p>

<p>既然是实验App，那么就肯定需要记录测试者的实验数据，这个实验记录的是测试者找到目标物的时间,7顺理成章的就写了一个专门记载时间的类，项目具体东西放github了。<a href="https://github.com/fanhongwei/MentalModel">MentalModel</a></p>

<p>最后，在做这个App的过程中还学到的一个东西，就是真正结束掉一个App，具体是思路是就是利用堆栈的原理，在intent实现activity跳转的时候加<code>intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</code>然后就可以轻松结束应用了，关于结束应用的方法网上还有很多，我就不说了。</p>
]]></content>
  </entry>
  
</feed>
